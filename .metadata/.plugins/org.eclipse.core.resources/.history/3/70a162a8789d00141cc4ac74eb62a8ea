#use warnings;
#use strict;

use String::Index qw( cindex ncindex crindex ncrindex );
use List::MoreUtils ':all';
use Bio::Seq;
use Bio::SeqIO;

my $file = "humrep_HERV4_I_Transposable_Element_FT_HERV4_I_2p_14357_2.calJac";

sub get_one_record($file){
	local $/ = " >\n\n";
	my $file_handle = shift(@_);
	open(FH,$file_handle);
	my @records;
	while(<FH>){
		push @records,$_;
	}
#	our @records = <FH>;
	return @records;
}
sub parse_exonerate_per_record($singlerecord){
	my @sequence;
	#Isertion => delete
	#Frameshift => delete
	#stopcodon => changes to NNN
	#with N => defined to pseudo-transposon
	#if it is an psudo gene please note it on id
	## Query: humrep_L1PREC2;Transposable_Element;FT;L1PREC2_2p;14809;2
	$record_lines[2] =~ /:\s(.*?);.*?;(\w*);(\w*$)/;
	my $id=join("_",$1,$2,$3);
	## Target: chr1:73900-77690(+)
	$record_lines[3] =~ /:\s(.*?):(\w*)-(\w*)\(([+|-])\)/;
	my ($chr,$start,$end,$strand) = ($1,$2,$3,$4);
	## offset Target range: 1 -> 3635
	$record_lines[7] =~ /:\s(\d*?)\s/;
	my @record_lines = split('\n',shift(@_));
	my $offset = $1;

	# from(12,13) with stepsize 5ï¼›while( ! ($record_lines[12+5i] =~ /^#/ && $record_lines[13+5i] =~ /^#/) )
	my $i = 0;
	while( ! ($record_lines[11+5*$i] =~ /^#/ && $record_lines[12+5*$i] =~ /^#/) ){
		
#		my $original_target = $record_lines[10+5*$i];
		my $target = $record_lines[11+5*$i];
		$target =~ /^\s*(.*?)\s*$/;
		$target = $1;
		my $query = $record_lines[12+5*$i];
		$query =~ /:\s*(.*?)\s*:/;
		$query = $1;
		$i++;
		#for frameshift or stop codon or intron
		if(length($target)==length($query)&& ($target =~ /\*|\#|-|\+/i || $query =~ /n|-|\.|\{|\}/i)){
			my @target_ele = split('',$target);
			my @query_ele = split('',$query);
			#get removal elements indexs
			#for frame_shift || N 
			my @elements_will_be_removed_t = indexes {$_ =~ /\#|-|\+|\{|\}/} @target_ele;
			my @elements_will_be_changed_t = indexes {$_ =~ /\*/} @target_ele;
			my @elements_will_be_removed_q = indexes {$_ =~ /n|\.|-|\{|\}/i} @query_ele;
			push my @elements_will_be_removed_mix ,@elements_will_be_removed_t,@elements_will_be_removed_q;
			@elements_will_be_removed_mix_uniq = uniq @elements_will_be_removed_mix;
			print join("\t",@elements_will_be_removed_mix_uniq,@elements_will_be_changed_t),"\n";
			foreach(@elements_will_be_changed_t){
				$query_ele[$_]='N';
			}
			foreach(@elements_will_be_removed_mix_uniq){
				print $query_ele{$_};
				$query_ele[$_]='';
			}
#			print "Raw:";
#			print $query,"\nNow:";
#			print join('',@query_ele),"\n";
			$query = join('',@query_ele);
		}else{
			print $query,"\n";
		}
		push @sequence,$query;
		
	}
	my $seq_obj = Bio::Seq->new(
									-seq => join('',@sequence),
									-id  => $id,
									-alphabet => 'dna');
}

## main ##

my @records = &get_one_record($file);
$records[0] =~ s/\n//;
foreach(@records){
	&parse_exonerate_per_record($_);
}
